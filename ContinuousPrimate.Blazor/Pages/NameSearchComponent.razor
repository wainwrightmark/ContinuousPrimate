@using System.Collections.Concurrent
@inject HttpClient _httpClient;
@inject Blazored.LocalStorage.ILocalStorageService _localStorage

<MudContainer MaxWidth="MaxWidth.Small" Style="padding-left: 0; padding-right: 0;">
    
    <MudTextField
        @bind-Value="TextValue"
        Label="Name"
        HelperText="@HelperText"
        Variant="Variant.Text"
        Clearable="true" Disabled="@_isSearching"/>

    @if (MyData is not null)
    {
        <MudSimpleTable Hover="true" Dense="true" Striped="true">

            <tbody>
            @foreach (var row in MyData.TableElements)
            {
                <tr>
                    <td>
                        <MudText>@row.TermsText</MudText>
                        
                    </td>
                    <td>
                        @foreach (var word in @row.AnagramWords)
                        {
                            <MudTooltip Arrow="true" Text="@word.Gloss">
                                <MudText>@word.Text </MudText>
                            </MudTooltip>
                            <MudElement> </MudElement>
                        }
                    </td>

                    <td>
                        
                    <MudMenu Icon="@Icons.Filled.Menu" Dense="true" AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.TopRight">
                        <MudMenuItem>
                            <MudIconButton
                                Link="@SocialHelpers.GetFacebookShareURL(row)"
                                Icon="@Icons.Custom.Brands.Facebook"
                                Title="Share on Facebook"
                                Target="_blank"/>
                        </MudMenuItem>
                        
                        <MudMenuItem>
                            <MudIconButton
                                Link="@SocialHelpers.GetTwitterShareUrl(row)"
                                Icon="@Icons.Custom.Brands.Twitter"
                                Title="Share on Twitter"
                                Target="_blank"/>
                        </MudMenuItem>
                        
                        <MudMenuItem>
                            <MudToggleIconButton
                                Icon="@Icons.Filled.StarOutline"
                                ToggledIcon="@Icons.Filled.Star"
                                Title="Favourite"
                                Toggled="@DatabaseWords.Contains(row)"
                                ToggledChanged="b => SetFavourite(b, row)"/>
                        </MudMenuItem>
                    </MudMenu>

                    </td>
                </tr>
            }
            </tbody>

        </MudSimpleTable>

        
    }
    else
    {
        <MudSkeleton Style="margin-top: 50px" SkeletonType="SkeletonType.Rectangle" Width="100%" Height="450px"/>
    }
    
    
    <MudToolBar>
        <MudIconButton
            Link="https://github.com/wainwrightmark/ContinuousPrimate"
            Icon="@Icons.Custom.Brands.GitHub"
            Title="View on Github"
            Target="_blank"/>
        <MudSpacer/>
        @if (MyData is not null)
        {
            <MudNumericField T="int"
                             @bind-Value="MyData.PageNumber"
                             Min="1"
                             FullWidth="false"
                             Style="Width: 60px;"
                             HideSpinButtons="true"
                             Adornment="Adornment.End"
                             AdornmentIcon="@Icons.Filled.NavigateNext"
                             Disabled="@(!MyData.CanIncreasePageNumber)"
                             OnAdornmentClick="() => MyData.PageNumber++"/>
        }
    </MudToolBar>

</MudContainer>


@code{

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Console.WriteLine(DateTime.Now + ": Component Initialized");

        await LoadWordData();
        await LoadDatabaseWords();
    }

        private const string SavedWordsKey = "ContinuousPrimateSavedAnagrams";

    private async Task LoadDatabaseWords()
    {
        var data = await _localStorage.GetItemAsync<List<PartialAnagram>>(SavedWordsKey)?? new List<PartialAnagram>();

        DatabaseWords.UnionWith(data);

        Console.WriteLine($"{DatabaseWords.Count} Database Words Found");
        
        DatabaseWordsData = new LoadedData(DatabaseWords);
        StateHasChanged();
    }

    private async Task LoadWordData()
    {
        if (_firstNames is null)
        {
            var names = await _httpClient.GetStringAsync("./Data/Names.txt");
            Console.WriteLine(DateTime.Now + ": Names Loaded");
            _firstNames = new Lazy<IEnumerable<(AnagramKey key, string name)>>(
                names
                    .Split('\n', StringSplitOptions.TrimEntries)
                    .Select(name => (AnagramKey.Create(name), name)).Memoize()
                );
        }

        if (_wordDict is null)
        {
            _wordDict = await DataLoading.GetWordDict(_httpClient);
        }
    }


    private static Lazy<IEnumerable<(AnagramKey key, string name)>>? _firstNames;
    private static Lazy<WordDict>? _wordDict;

    
    private string _textValue = "";
    public string TextValue
    {
        get => _textValue;
        set
        {
            _textValue = value.Trim();
            Search();
        }
    }


    public async Task RemoveDatabaseWord(PartialAnagram pa)
    {
        if(DatabaseWords.Remove(pa))
            await _localStorage.SetItemAsync(SavedWordsKey, DatabaseWords.ToList());
    }
    
    public async Task AddDatabaseWord(PartialAnagram pa)
    {
        if(DatabaseWords.Add(pa))
            await _localStorage.SetItemAsync(SavedWordsKey, DatabaseWords.ToList());
    }

    public readonly HashSet<PartialAnagram> DatabaseWords = new();


    public LoadedData? MyData
    {
        get
        {
            if (_isSearching) return null;

            if (!string.IsNullOrWhiteSpace(TextValue))
                return SearchData;

            return DatabaseWordsData;
        }
    }

    public LoadedData? DatabaseWordsData;

    public LoadedData? SearchData { get; private set; }

    private Task SetFavourite(bool fav, PartialAnagram anagram)
    {
        if (fav) return AddDatabaseWord(anagram);
        else return RemoveDatabaseWord(anagram);
    }

    public string HelperText = "Type your last name (or whatever)";

    private bool _isSearching;

    public async Task Search()
    {
        if (!_isSearching && _firstNames is not null && _wordDict is not null)
        {
            HelperText = "Searching";
            _isSearching = true;
            SearchData = null;

            StateHasChanged();
            await Task.Delay(1);

            var result =
                _cache.GetOrAdd(TextValue, t => NameSearch.Search(t, 
                    _firstNames.Value,
                    _wordDict.Value
                    ).Memoize());

            HelperText = "";
            SearchData = new LoadedData(result);
            _isSearching = false;
            StateHasChanged();
        }
    }

    private readonly ConcurrentDictionary<string, IEnumerable<PartialAnagram>> _cache = new();


    

}