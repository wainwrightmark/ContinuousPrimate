@using System.Collections.Concurrent
@inject HttpClient _httpClient;

<MudContainer MaxWidth="MaxWidth.Small">
    
    <MudTextField
        @bind-Value="TextValue"
        Label="Name"
        HelperText="@HelperText"
        Variant="Variant.Text"
        Clearable="true" Disabled="@_isSearching"/>

    @if (Data is not null)
    {
        <MudSimpleTable Hover="true" Dense="true" Striped="true">

            <tbody>
            @foreach (var row in Data.TableElements)
            {
                <tr>
                    <td>
                        <MudText>@row.TermsText</MudText>
                        
                    </td>
                    <td>
                        @foreach (var word in @row.AnagramWords)
                        {
                            <MudTooltip Arrow="true" Text="@word.Gloss">
                                <MudText>@word.Text </MudText>
                            </MudTooltip>
                            <MudElement> </MudElement>
                        }
                    </td>

                    <td>
                        <MudIconButton
                            Link="@SocialHelpers.GetFacebookShareURL(row)"
                            Icon="@Icons.Custom.Brands.Facebook"
                            Title="Share on Facebook"
                            Target="_blank"/>
                        <MudIconButton
                            Link="@SocialHelpers.GetTwitterShareUrl(row)"
                            Icon="@Icons.Custom.Brands.Twitter"
                            Title="Share on Twitter"
                            Target="_blank"/>
                    </td>
                </tr>
            }
            </tbody>

        </MudSimpleTable>

        <MudToolBar>
            <MudIconButton
                Link="https://github.com/wainwrightmark/ContinuousPrimate"
                Icon="@Icons.Custom.Brands.GitHub"
                Title="View on Github"
                Target="_blank"/>
            <MudSpacer/>
            <MudNumericField T="int"
                             @bind-Value="Data.PageNumber"
                             Min="1"
                             FullWidth="false"
                             Style="Width: 60px;"
                             HideSpinButtons="true"
                             Adornment="Adornment.End"
                             AdornmentIcon="@Icons.Filled.NavigateNext"
                             Disabled="@(!Data.CanIncreasePageNumber)"
                             OnAdornmentClick="() => Data.PageNumber++"/>
        </MudToolBar>
    }
    else
    {
        <MudSkeleton Style="margin-top: 100px" SkeletonType="SkeletonType.Rectangle" Width="100%" Height="300px"/>
    }

</MudContainer>


@code{

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Console.WriteLine(DateTime.Now + ": Component Initialized");

        if (FirstNames is null)
        {
            var names = await _httpClient.GetStringAsync("./Data/Names.txt");
            Console.WriteLine(DateTime.Now + ": Names Loaded");
            FirstNames = new Lazy<IEnumerable<(AnagramKey key, string name)>>(

                names
                    .Split('\n', StringSplitOptions.TrimEntries)
                    .Select(name=> (AnagramKey.Create(name), name)).Memoize()
            
                );
        }
        if (NounLookup is null)
        {
            var nouns = await _httpClient.GetStringAsync("./Data/Nouns.txt");
            Console.WriteLine(DateTime.Now + ": Nouns Loaded");
            NounLookup = WordListHelper.MakeLookup(nouns);
        }

        if (AdjectiveLookup is null)
        {
            var adjectives = await _httpClient.GetStringAsync("./Data/Adjectives.txt");
            Console.WriteLine(DateTime.Now + ": Adjectives Loaded");
            AdjectiveLookup = WordListHelper.MakeLookup(adjectives);
        }
    }


    private static Lazy<IEnumerable<(AnagramKey key, string name)>> FirstNames;
    private static Lazy<ILookup<AnagramKey, Word>> NounLookup;
    private static Lazy<ILookup<AnagramKey, Word>> AdjectiveLookup;

    
    private string _textValue;
    public string TextValue
    {
        get => _textValue;
        set
        {
            _textValue = value;
            Search();
        }
    }

    public List<PartialAnagram> DatabaseWord;


    public LoadedData? Data { get; private set; }

    public string HelperText = "Type your last name (or whatever)";

    private bool _isSearching;

    public async Task Search()
    {
        if (!_isSearching)
        {
            HelperText = "Searching";
            _isSearching = true;
            Data = null;

            StateHasChanged();
            await Task.Delay(1);

            var result =
                _cache.GetOrAdd(TextValue, t => NameSearch.Search(t, 
                    FirstNames.Value,
                    NounLookup.Value,
                    AdjectiveLookup.Value
                    ).Memoize());

            HelperText = "";
            Data = new LoadedData(result);
            _isSearching = false;
            StateHasChanged();
        }
    }

    private readonly ConcurrentDictionary<string, IEnumerable<PartialAnagram>> _cache = new();


}